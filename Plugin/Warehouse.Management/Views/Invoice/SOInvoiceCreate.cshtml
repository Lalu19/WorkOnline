@{
	//Layout = "_MainAppLayout";
	ViewData["Title"] = "SO Invoice";
	var podatails = ViewBag.SOOrderDetails;
	var sellerdetials = ViewBag.SellerDetails;
}
@addTagHelper *, Syncfusion.EJ2
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers *@


<!-- Common CSS -->
<link rel="stylesheet" href="~/app/css/bootstrap.min.css">
<link rel="stylesheet" href="~/app/fonts/icomoon/icomoon.css">
<link rel="stylesheet" href="~/app/css/main.css">


<style>
	.gutters {
		margin-right: -69px;
		margin-left: -39px;
	}

	#color {
		background-color: #343a40; /* Dark background color */
		color: white; /* Text color */
		font-weight: bold; /* Bold text */
	}

	table.table-bordered th,
	table.table-bordered td {
		border: 1px solid #343a40; /* Border color */
	}

	#BUTTON button {
		background-color: #343a40; /* Dark background color for the button */
		color: white; /* Text color for the button */
		font-weight: bold; /* Bold text for the button */
	}

	/* Print styles */
	.main-content {
		width: 210mm; /* Width of A4 page */
		height: 297mm; /* Height of A4 page */
		margin: 0 auto;
		padding: 20px; /* Add padding to ensure content doesn't touch edges */
		margin-bottom: 0; /* Remove margin bottom */
	}

	.card {
		margin-bottom: 20px; /* Add margin between cards */
	}

	.card-body button {
		display: block; /* Hide print button when printing */
	}

	/* Decrease table font size */
	#soOrderTable {
		font-size: 10pt;
	}

		/* Decrease padding within table cells */
		#soOrderTable th,
		#soOrderTable td {
			padding: 1px;
		}

	/* CSS for the new table */
	#fixedHeader {
		width: 100%; /* Adjust the width as needed */
		border-collapse: collapse; /* Collapse table borders */
	}

		#fixedHeader th,
		#fixedHeader td {
			border: 1px solid #ddd; /* Add borders to table cells */
			padding: 8px; /* Add padding to table cells */
			text-align: center; /* Center-align text */
		}

		#fixedHeader th {
			background-color: #f2f2f2; /* Add background color to header cells */
		}

		#fixedHeader tbody tr:nth-child(even) {
			background-color: #f2f2f2; /* Add background color to even rows */
		}

		/* Style for the sub-headers under Quantity */
		#fixedHeader th[colspan="2"] {
			text-align: center; /* Center-align text */
		}

		/* Adjust padding for sub-headers */
		#fixedHeader th[colspan="2"], #fixedHeader th[rowspan="2"] {
			padding: 8px; /* Add padding to sub-headers */
		}
	/* Styles for the Print Invoice button */
	.print-button {
		background-color: #007bff; /* Blue background color */
		color: #fff; /* White text color */
		border: none; /* No border */
		padding: 10px 20px; /* Padding */
		border-radius: 5px; /* Rounded corners */
		font-size: 16px; /* Font size */
		cursor: pointer; /* Cursor style */
		transition: background-color 0.3s; /* Smooth transition */
	}

		.print-button:hover {
			background-color: #0056b3; /* Darker blue on hover */
		}

</style>

<div class="main-content">
	<div class="row gutters">
		<div class="col-xl-12 col-lg-12 col-md-10 col-sm-10 mx-auto">
			<div class="card">
				@* <div class="card-header">

				<div class="row">
				<div class="col-md-10">
				<b>Invoice</b>
				</div>
				<div class="col-md-2 ">
				</div>
				</div>
				</div> *@

				<div class="invoice-container" id="pdf-content">
					<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
						@* <div class="card"> *@
						<div class="card-body">
							<div class="invoice-container">
								<h4 style="text-align:center;color:#EB05A9;font-weight:bold;">Happiness Under Budget Retail</h4>
								<p style="text-align:center;">
									<strong>Address:</strong> @sellerdetials.Address,
									<strong>Country:</strong> @sellerdetials.Country,
									<strong>State:</strong> @sellerdetials.State,
									<strong>Alternate Phone:</strong> @sellerdetials.AlternatePhone,
									<strong>GST Number:</strong> @sellerdetials.GSTNumber
								</p>

								<div class="row gutters">
									<hr class="my-2" style="width: 100%; background-color: #343a40; border-color: #343a40;">
								</div>

								<div class="row gutters">
									<div class="col-xl-6 col-lg-6 col-md-6 col-sm-6">

										<p class="text-left"><strong>Name: </strong>@sellerdetials.Name</p>
										<p class="text-left"><strong>Address: </strong>@sellerdetials.Address</p>
										<p class="text-left"><strong>GST Number: </strong>@sellerdetials.GSTNumber</p>
										<p class="text-left"><strong>Phone: </strong>@sellerdetials.PrimaryPhone</p>
										<p class="text-left"><strong>Mail: </strong>@sellerdetials.MailId</p>
									</div>

									<div class="col-lg-6 col-md-6 col-sm-6">
										<p><strong>Warehouse: </strong>@podatails.WareHuose.WareHouseName</p>
										<p><strong>Bill No: </strong>@podatails.POPUniqueNumber</p>
									</div>
								</div>


								<div class="row gutters">
									<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
										@* <div class="card"> *@
										@* <div class="card-header"></div> *@
										@* <div class="card-body"> *@
										<table id="soOrderTable" class="table table-bordered table-responsive">
											<tr id="color">
												<th>Sl.No</th>
												<th>HSN</th>
												<th>Product</th>
												<th>Quantity</th>
												<th>Units</th>
												<th>Purchase Cost</th>
												<th>Total Amount</th>
												<th>CGST</th>
												<th>CGST Value</th>
												<th>SGST</th>
												<th>SGST Value</th>
												<th>Sale Value</th>
											</tr>
											@foreach (var item in podatails.SalesOrderItems)
											{
												var totalAmount = item.Quantity * item.Item.PurchaseCost;
												var cgstValue = Math.Round(totalAmount * item.Item.CGST / 100, 2);
												var sgstValue = Math.Round(totalAmount * item.Item.SGST / 100, 2);
												var saleValue = Math.Round(totalAmount + cgstValue + sgstValue, 2);

												<tr>
													<td>@item.Item.HSN</td>
													<td>@item.Item.ItemName</td>
													<td>@item.Quantity</td>
													<td>@item.Item.ShortName</td>
													<td>@item.Item.PurchaseCost</td>
													<td>@totalAmount</td>
													<td>@item.Item.CGST</td>
													<td>@cgstValue</td>
													<td>@item.Item.SGST</td>
													<td>@sgstValue</td>
													<td>@saleValue</td>
												</tr>
											}
										</table>
										@* </div> *@
										@* 	</div> *@
									</div>
								</div>


								<div class="row gutters">
									<div class="col-lg-9 col-md-9 col-sm-12">
									</div>
									<div class="col-lg-3 col-md-3 col-sm-12">
										<table>
											<tbody>
												<tr>
													<td>
														<p class="text-right"><strong>Subtotal:</strong>@podatails.TotalAmount</p>
													</td>
												</tr>
											</tbody>
										</table>
									</div>
								</div>

								<div class="row gutters">
									<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">
										<table id="fixedHeader" class="table table-striped table-bordered">
											<thead>
												<tr>
													<th rowspan="2">HSN/SAC</th>
													<th rowspan="2">Quantity</th>
													<th rowspan="2">Taxable Value</th>
													<th colspan="2">Central Tax</th>
													<th colspan="2">State Tax</th>
													<th rowspan="2">Total Tax Amount</th>
													<!-- Add more headers as needed -->
												</tr>
												<tr>
													<!-- Sub-headers for Quantity -->
													<th>Rate</th>
													<th>Amount</th>
													<th>Rate</th>
													<th>Amount</th>
													<!-- Add more headers as needed -->
												</tr>
											</thead>
											@{
												// Define a HashSet to store unique HSN values
												HashSet<int> uniqueHSNs = new HashSet<int>();
											}

											<tbody id="secondTableBody">
												@foreach (var item in podatails.SalesOrderItems)
												{
													int hsn;
													if (int.TryParse(item.Item.HSN, out hsn))
													{
														if (!uniqueHSNs.Contains(hsn))
														{
															uniqueHSNs.Add(hsn);
															<!-- Placeholder row for totals -->
															<tr>
																<td>@item.Item.HSN</td>
																<td>@item.Quantity</td>
																<td id="totalTaxableAmount"></td>
																<td id="totalCentralTaxRate"></td>
																<td id="totalCentralTaxAmount"></td>
																<td id="totalStateTaxRate"></td>
																<td id="totalStateTaxAmount"></td>
																<td id="totalTaxAmounte"></td>
																<!-- Add more total cells as needed -->
															</tr>
														}
													}
												}
											</tbody>

										</table>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
				@* <div class="card-body" style="text-align: center;">
				<div class="col-lg-6 col-md-6 col-sm-12" style="display:inline-block;">
				<button onclick="printInvoice()">Print Invoice</button>
				</div>
				</div> *@
				<div class="card-body" style="text-align:-webkit-right;">
					<div class="col-lg-6 col-md-6 col-sm-12" style="display:inline-block;">
						<button class="print-button" onclick="printInvoice()">Print Invoice</button>
					</div>
				</div>


			</div>
		</div>
		@* </div> *@
	</div>
</div>



<script>

	// Function to add Sl.No to the table
	document.addEventListener('DOMContentLoaded', function () {
		addSerialNumber();
	});

	function addSerialNumber() {
		var table = document.getElementById("soOrderTable");
		var rows = table.getElementsByTagName("tr");

		for (var i = 1; i < rows.length; i++) {
			var cell = rows[i].insertCell(0);
			cell.textContent = i;
		}
	}
</script>

<script>
	function printInvoice() {
		var printButton = document.querySelector('.card-body button');
		printButton.style.display = 'none';
		window.print();
		printButton.style.display = 'block';

	}
</script>


<script>
	document.addEventListener('DOMContentLoaded', function () {
		calculateAndPopulateSecondTable();
	});

	function calculateAndPopulateSecondTable() {
		var table = document.getElementById("soOrderTable");
		var rows = table.getElementsByTagName("tr");

		// Create objects to store total quantity, total amount, CGST Value, and SGST Value for each HSN
		var hsnQuantities = {};
		var hsnAmounts = {};
		var hsnCGSTValue = {};
		var hsnSGSTValue = {};

		// Iterate through rows of the first table and calculate totals for each HSN
		for (var i = 1; i < rows.length; i++) {
			var cells = rows[i].getElementsByTagName("td");
			var hsn = cells[1].innerText.trim(); // HSN column
			var quantity = parseFloat(cells[3].innerText); // Quantity column
			var amount = parseFloat(cells[6].innerText); // Total Amount column
			var cgstValue = parseFloat(cells[8].innerText); // CGST Value column
			var sgstValue = parseFloat(cells[10].innerText); // SGST Value column

			// If HSN already exists in the objects, add the values to the existing totals
			if (hsnQuantities.hasOwnProperty(hsn)) {
				hsnQuantities[hsn] += quantity;
				hsnAmounts[hsn] += amount;
				hsnCGSTValue[hsn] += cgstValue;
				hsnSGSTValue[hsn] += sgstValue;
			} else { // Otherwise, initialize the totals for the HSN
				hsnQuantities[hsn] = quantity;
				hsnAmounts[hsn] = amount;
				hsnCGSTValue[hsn] = cgstValue;
				hsnSGSTValue[hsn] = sgstValue;
			}
		}

		// Populate the second table with the calculated totals
		var secondTableBody = document.getElementById("secondTableBody");

		// Iterate through the rows of the second table and update the existing cells
		var secondTableRows = secondTableBody.getElementsByTagName("tr");
		for (var j = 0; j < secondTableRows.length; j++) {
			var secondTableCells = secondTableRows[j].getElementsByTagName("td");
			var hsn = secondTableCells[0].innerText.trim(); // HSN column

			// Check if the HSN exists in the objects
			if (hsnQuantities.hasOwnProperty(hsn) && hsnAmounts.hasOwnProperty(hsn) && hsnCGSTValue.hasOwnProperty(hsn) && hsnSGSTValue.hasOwnProperty(hsn)) {
				// Update the Quantity cell with the total quantity for the HSN
				secondTableCells[1].innerText = hsnQuantities[hsn];
				// Update the Taxable Value cell with the total amount for the HSN
				secondTableCells[2].innerText = hsnAmounts[hsn].toFixed(2); // Assuming Taxable Value is the third column
				// Update the Central Tax Rate cell with the calculated CGST Value for the HSN
				secondTableCells[3].innerText = (hsnCGSTValue[hsn] / 2.5).toFixed(2);
				// Update the Central Tax Amount cell with the calculated CGST Value for the HSN
				secondTableCells[4].innerText = hsnCGSTValue[hsn].toFixed(2);
				// Update the State Tax Rate cell with the calculated SGST Value for the HSN
				secondTableCells[5].innerText = (hsnSGSTValue[hsn] / 2.5).toFixed(2);
				// Update the State Tax Amount cell with the calculated SGST Value for the HSN
				secondTableCells[6].innerText = hsnSGSTValue[hsn].toFixed(2);
				// Calculate and update the Total Tax Amount cell
				var totalTaxAmount = parseFloat(secondTableCells[4].innerText) + parseFloat(secondTableCells[6].innerText);
				secondTableCells[7].innerText = totalTaxAmount.toFixed(2);
			}
		}
	}
</script>
