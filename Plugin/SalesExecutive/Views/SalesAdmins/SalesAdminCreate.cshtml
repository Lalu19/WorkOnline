@model CloudVOffice.Data.DTO.Sales.SalesAdminDTO;
@using System.Collections;
@using Newtonsoft.Json;
@{
	Layout = "_MainAppLayout";
	ViewData["Title"] = "SalesAdminTarget";

}
@addTagHelper *, Syncfusion.EJ2
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<header class="main-heading">
	<div class="container-fluid">
		<div class="row">
			<div class="col-xl-8 col-lg-8 col-md-8 col-sm-8">
				<div class="page-icon">
					<i class="icon-laptop_windows"></i>
				</div>
				<div class="page-title">
					<h5>Sales</h5>
					<h6 class="sub-heading">  </h6>
				</div>
			</div>
			<div class="col-xl-4 col-lg-4 col-md-4 col-sm-4">
				<div class="right-actions">
					<span class="last-login">  </span>
				</div>
			</div>
		</div>
	</div>
</header>


<div class="main-content">
	<div class="row gutters">
		<div class="col-xl-12 col-lg-12 col-md-12 col-sm-12">

			<div class="card">

				<div class="card-header">

					<div class="row">
						<div class="col-md-8">
							Sales Admin Target
						</div>
						<div class="col-md-4 text-right float-right">
							<a href="/SalesExecutive/SalesAdmin/SalesAdminTargetView" class="btn btn-success btn-sm float-right"><i class="icon-list2"></i> List </a>

						</div>
					</div>
				</div>

				<form id="formPost" asp-route="SalesExecutive/SalesAdmin/CreateTargetBySalesAdmin" method="post" autocomplete="off">
					<div asp-ation-summary="ModelOnly" class="message-error"></div>


					<div class="card-header"><b>Category Wise</b></div>
					<div class="card-body">

						<div class="form-row">

							<input asp-for="@Model.SalesAdminTargetId" type="hidden" />


							@*<div class="form-group col-md-3">

								<label for="SalesAdminTargetName" class="form-label">SalesAdmin Target Name&nbsp;<span style="color:red;"><b>*</b></span></label>
								<input asp-for="@Model.SalesAdminTargetName" type="text" class="form-control" autofocus="autofocus" placeholder="SalesAdminTargetName" />
								<span asp-validation-for="SalesAdminTargetName"></span>
							</div>*@


						</div>

						<div class="form-row">

							<div class="form-group col-md-3">
								<label for="MonthId" class="form-label">Month Name</label>
								<ejs-dropdownlist id="MonthId" allowFiltering="true" ejs-for="@Model.MonthId" dataSource="@(new SelectList((IEnumerable)ViewBag.months, "MonthId", "MonthName").Items)" placeholder="Select Month" popupHeight="220px" autofocus="autofocus">
									<e-dropdownlist-fields text="MonthName" value="MonthId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="MonthId"></span>
							</div>

							<div class="form-group col-md-3">
								<label for="SectorId" class="form-label">Sector &nbsp</label>
								<ejs-dropdownlist id="SectorId" name="SectorId" allowFiltering="true" change="onChangeSector"
												  dataSource="@(new SelectList((IEnumerable)ViewBag.Sectors, "SectorId", "SectorName").Items)"
												  placeholder="Select Sector" popupHeight="220px"
												  value="@Model.SectorId">
									<e-dropdownlist-fields text="SectorName" value="SectorId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="SectorId"></span>
							</div>

							<div class="form-group col-md-3">
								<label for="SalesManagerId" class="form-label">SalesManager Name</label>
								<ejs-dropdownlist id="SalesManagerId" allowFiltering="true" change="onChangeSalesManager" ejs-for="@Model.SalesManagerId" dataSource="@(new SelectList((IEnumerable)ViewBag.SalesManager, "SalesManagerId", "SalesManagerName").Items)" placeholder="Select SalesManager" popupHeight="220px">
									<e-dropdownlist-fields text="SalesManagerName" value="SalesManagerId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="SalesManagerId"></span>
							</div>


							<div class="form-group col-md-3">
								<label for="CategoryId" class="form-label">Category Name</label>
								<ejs-dropdownlist id="CategoryId" allowFiltering="true" ejs-for="@Model.CategoryId" placeholder="Select SubCategory" popupHeight="220px">
									<e-dropdownlist-fields text="categoryName" value="categoryId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="CategoryId"></span>
							</div>

						</div>

						<div class="form-row">

							<div class="form-group col-md-3">

								<label for="MonthlyCategoryWiseTarget" class="form-label">Monthly CategoryWise Target &nbsp;<span style="color:red;"><b>*</b></span></label>
								<input asp-for="@Model.MonthlyCategoryWiseTarget" id="CategoryWiseTarget" type="text" class="form-control" placeholder="Monthly CategoryWise Target" />
								<span asp-validation-for="MonthlyCategoryWiseTarget"></span>
							</div>

						</div>



						@*<div class="form-row">

							<div class="col-md-3">
								<div class="form-group">
									<label class="form-label">Sector</label>
									<div class="input-box">
										<select class="form-control" id="SectorId">
										</select>
									</div>

								</div>
							</div>
							<div class="col-md-3">
								<div class="form-group">
									<label class="form-label">Category</label>
									<div class="input-box">
										<select class="form-control" id="CategoryId">
										</select>
									</div>
								</div>
							</div>

							<div class="form-group col-md-3">

								<label for="MonthlyCategoryWiseTarget" class="form-label">Monthly CategoryWise Target &nbsp;<span style="color:red;"><b>*</b></span></label>
								<input asp-for="@Model.MonthlyCategoryWiseTarget" type="text" class="form-control" autofocus="autofocus" placeholder="Monthly CategoryWise Target" />
								<span asp-validation-for="MonthlyCategoryWiseTarget"></span>
							</div>


						</div>*@



						<br /><br />


						<div class="row">
							<div class="col-md-6">
								<button type="button" id="Add_Target" class="btn btn-radius btn-info">Add</button>
							</div>
						</div>

						<br />
						
						<div class="table-responsive mb-5">
							<table id="Statee" class="table table-bordered table-hover">
								<thead>
									<tr>
										<th>Month</th>
										<th>Sector</th>
										<th>Sales Manager</th>
										<th>Category</th>
										<th>Target</th>
										<th>Action</th>
									</tr>
								</thead>
								<tbody id="Target_tb">
								</tbody>
							</table>
						</div>

						<div class="table-responsive col-md-3 mt-5">
							<table id="Sector" class="table table-bordered table-hover">
								<thead>
									<tr>
										<th>Sector</th>
										<!-- Add additional headers as needed -->
										<th>Total Target</th>
									</tr>
								</thead>
								<tbody id="Sector_tb">
									<!-- You can populate this tbody dynamically with sector information -->
								</tbody>
							</table>
						</div>
						

						<br />

						@*<div class="row">
							<div class="col-md-6">

								<button type="button" id="btnSave" class="btn btn-radius btn-success">Save</button>

							</div>
						</div>*@


						@*<div class="form-row">
							<div class="form-group col-md-3">

								<label for="MonthlySectorWiseTarget" class="form-label">Monthly SectorWise Target&nbsp;<span style="color:red;"><b>*</b></span></label>
								<input asp-for="@Model.MonthlySectorWiseTarget" type="text" class="form-control" autofocus="autofocus" placeholder="MonthlySectorWiseTarget" />
								<span asp-validation-for="MonthlySectorWiseTarget"></span>
							</div>

						</div>*@


						<br /><br />

					</div>
					

					<div class="card-header"><b>Brand Wise</b></div>
					<div class="card-body">
						<div class="form-row">

							<div class="form-group col-md-3">
								<label for="MonthId" class="form-label">Month Name</label>
								<ejs-dropdownlist id="MonthIdd" allowFiltering="true" ejs-for="@Model.MonthId" dataSource="@(new SelectList((IEnumerable)ViewBag.months, "MonthId", "MonthName").Items)" placeholder="Select Month" popupHeight="220px" required>
									<e-dropdownlist-fields text="MonthName" value="MonthId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="MonthId"></span>
							</div>

							<div class="form-group col-md-3">
								<label for="SalesManagerId" class="form-label">SalesManager Name</label>
								<ejs-dropdownlist id="SalesManagerIdd" allowFiltering="true" change="onChangeSalesManagerd" ejs-for="@Model.SalesManagerId" dataSource="@(new SelectList((IEnumerable)ViewBag.SalesManager, "SalesManagerId", "SalesManagerName").Items)" placeholder="Select SalesManager" popupHeight="220px">
									<e-dropdownlist-fields text="SalesManagerName" value="SalesManagerId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="SalesManagerId"></span>
							</div>


							<div class="form-group col-md-3">
								<label for="SectorId" class="form-label">Sector &nbsp</label>
								<ejs-dropdownlist id="SectorIdd" name="SectorId" allowFiltering="true" change="onChangeSectord"
													dataSource="@(new SelectList((IEnumerable)ViewBag.Sectors, "SectorId", "SectorName").Items)"
													placeholder="Select Sector" popupHeight="220px"
												  value="@Model.SectorId" required>
									<e-dropdownlist-fields text="SectorName" value="SectorId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="SectorId"></span>
							</div>


							@*<div class="form-group col-md-3">
								<label for="BrandId" class="form-label">Brand &nbsp</label>
								<ejs-dropdownlist id="BrandIdd" allowFiltering="true" ejs-for="@Model.BrandId" dataSource="@(new SelectList((IEnumerable)ViewBag.Brands, "BrandId", "BrandName").Items)" placeholder="Select Brand" popupHeight="220px" autofocus="autofocus">
									<e-dropdownlist-fields text="BrandName" value="BrandId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="BrandId"></span>
							</div>*@

							<div class="form-group col-md-3">
								<label for="BrandId" class="form-label">Brand Name</label>
								<ejs-dropdownlist id="BrandIdd" allowFiltering="true" ejs-for="@Model.BrandId" placeholder="Select SubCategory" popupHeight="220px" required>
									<e-dropdownlist-fields text="brandName" value="brandId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="BrandId"></span>
							</div>

						</div>

						<div class="form-row">

							<div class="form-group col-md-3">
								<label for="CategoryId" class="form-label">Category Name</label>
								<ejs-dropdownlist id="CategoryIdd" allowFiltering="true" ejs-for="@Model.CategoryId" placeholder="Select SubCategory1" popupHeight="220px" required>
									<e-dropdownlist-fields text="categoryName" value="categoryId"></e-dropdownlist-fields>
								</ejs-dropdownlist>
								<span asp-validation-for="CategoryId"></span>
							</div>

							<div class="form-group col-md-3">

								<label for="MonthlyCategoryWiseTarget" class="form-label">Monthly CategoryWise Target &nbsp;<span style="color:red;"><b>*</b></span></label>
								<input asp-for="@Model.MonthlyCategoryWiseTarget" id="CategoryWiseTargetd" type="text" class="form-control" placeholder="Monthly CategoryWise Target" required/>
								<span asp-validation-for="MonthlyCategoryWiseTarget"></span>
							</div>
						</div>

						<br /><br />

						<div class="row">
							<div class="col-md-6">
								<button type="button" id="Add_Targetd" class="btn btn-radius btn-info">Add</button>
							</div>
						</div>

						<br />

						<div class="table-responsive mb-5">
							<table id="Stateed" class="table table-bordered table-hover">
								<thead>
									<tr>
										<th>Month</th>
										<th>Sales Manager</th>
										<th>Sector</th>
										<th>Brand</th>
										<th>Category</th>
										<th>Target</th>
										<th>Action</th>
									</tr>
								</thead>
								<tbody id="Target_tbd">
								</tbody>
							</table>
						</div>

					</div>


					<div class="card-body">
						<div class="row">
							<div class="col-md-6">

								<button type="button" id="btnSave" class="btn btn-radius btn-success">Save</button>

							</div>
						</div>
					</div>

				</form>
			</div>



		</div>
	</div>

</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>

	//GetSector()
	//function GetSector() {		
	//	var opt = '';
	//	$.ajax({
	//		type: "GET",
	//		url: "/WareHouse/Sector/GetSectorList",
	//		contentType: "application/json",
	//		success: function (res) {
	//			console.log(res)
	//			var options = [];
	//			options.push('<option value="">Please Select </option>');
	//			for (var i = 0; i < res.data.length; i++) {
	//				//if (Id == res.data[i].userId) {
	//				//	opt = 'selected'
	//				//} else {
	//				//	opt = '';
	//				//}
	//				options.push('<option value="' + res.data[i].sectorId + '" ' + opt + '>' + res.data[i].sectorName + '</option>');
	//			}
	//			$("#SectorId").html(options.join(''));
	//		},
	//		error: function (data) {
	//			if (data.status == 401) {
	//				window.location.replace('/Message/TokenExpire');
	//			} else if (data.status == 403) {
	//				window.location.replace('/Message/Unauthorize');
	//			}
	//		}
	//	});
	//}






	var selectedSectorValue;
	var selectedCategoryValue;
	var selectedMonthValue;


	//for brandwise target, used a "d" in the end
	var selectedMonthValued;
	var selectedCategoryValued;
	var selectedSectorValued;
	var selectedBrandValued;



	function onChangeSector(args) {
		$.ajax({
			type: "GET",
			url: "/WareHouse/Category/GetCategoryBySectorId",
			data: { sectorId: args.value },
			contentType: "application/json",
			dataType: "json",
			success: function (result) {
				console.log(result);
				var categoryDropDown = document.getElementById("CategoryId").ej2_instances[0];
				categoryDropDown.dataSource = result;
				categoryDropDown.dataBind();

				categoryDropDown.value = null;

				selectedSectorValue = args.value;
			},
			error: function () {

			}
		});
	}

	function onChangeSectord(args) {
		$.ajax({
			type: "GET",
			url: "/WareHouse/Category/GetCategoryBySectorId",
			data: { sectorId: args.value },
			contentType: "application/json",
			dataType: "json",
			success: function (result) {
				console.log(result);
				var categoryDropDown = document.getElementById("CategoryIdd").ej2_instances[0];
				categoryDropDown.dataSource = result;
				categoryDropDown.dataBind();

				categoryDropDown.value = null;

				selectedSectorValued = args.value;
			},
			error: function () {

			}
		});
		$.ajax({
			type: "GET",
			url: "/SalesExecutive/SalesAdmin/BrandsBySectorId",
			data: { sectorId: args.value },
			contentType: "application/json",
			dataType: "json",
			success: function (result) {
				console.log(result);
				var brandDropDown = document.getElementById("BrandIdd").ej2_instances[0];
				brandDropDown.dataSource = result;
				brandDropDown.dataBind();

				brandDropDown.value = null;
			},
			error: function () {

			}
		});
	}




	
	//function GetCategoryId() {

	//	var categoryIdValue = $('#CategoryId').val();

	//	$.ajax({
	//		type: "GET",
	//		url: "/SalesExecutive/SalesAdmin/GetCategoryIdByName",
	//		data: { categoryName: categoryIdValue },
	//		contentType: "application/json",
	//		dataType: "json",
	//		success: function (result) {
	//			console.log(result);

	//			selectedCategoryValue = result;
	//		}
	//	});
	//}

	function GetCategoryId() {
		return new Promise(function (resolve, reject) {
			var categoryIdValue = $('#CategoryId').val();

			$.ajax({
				type: "GET",
				url: "/SalesExecutive/SalesAdmin/GetCategoryIdByName",
				data: { categoryName: categoryIdValue },
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log(result);

					selectedCategoryValue = result;
					resolve(result);
				},
				error: function () {
					reject("Error in GetCategoryId AJAX call");
				}
			});
		});
	}

	function GetMonthId() {
		return new Promise(function (resolve, reject) {
			var monthIdValue = $('#MonthId').val();

			$.ajax({
				type: "GET",
				url: "/SalesExecutive/SalesAdmin/GetMonthIdByName",
				data: { monthName: monthIdValue },
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log(result);

					selectedMonthValue = result;
					resolve(result);
				},
				error: function () {
					reject("Error in GetCategoryId AJAX call");
				}
			});
		});
	}

	
	function GetCategoryIdd() {
		return new Promise(function (resolve, reject) {
			var categoryIdValue = $('#CategoryIdd').val();

			$.ajax({
				type: "GET",
				url: "/SalesExecutive/SalesAdmin/GetCategoryIdByName",
				data: { categoryName: categoryIdValue },
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log(result);

					selectedCategoryValued = result;
					resolve(result);
				},
				error: function () {
					reject("Error in GetCategoryId AJAX call");
				}
			});
		});
	}

	function GetMonthIdd() {
		return new Promise(function (resolve, reject) {
			var monthIdValue = $('#MonthIdd').val();

			$.ajax({
				type: "GET",
				url: "/SalesExecutive/SalesAdmin/GetMonthIdByName",
				data: { monthName: monthIdValue },
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log(result);

					selectedMonthValued = result;
					resolve(result);
				},
				error: function () {
					reject("Error in GetCategoryId AJAX call");
				}
			});
		});
	}



	function GetBrandIdd() {
		return new Promise(function (resolve, reject) {
			var brandIdValue = $('#BrandIdd').val();

			$.ajax({
				type: "GET",
				url: "/SalesExecutive/SalesAdmin/GetBrandIdByName",
				data: { brandName: brandIdValue },
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log(result);

					selectedBrandValued = result;
					resolve(result);
				},
				error: function () {
					reject("Error in GetCategoryId AJAX call");
				}
			});
		});
	}


	var SalesManagerIdd;
	var SalesManagerIddd;

	function onChangeSalesManager(args) {

		var selectedSalesManagerId = args.value;

		console.log('Selected SalesManagerId:', selectedSalesManagerId);

		SalesManagerIdd = selectedSalesManagerId;
	}

	function onChangeSalesManagerd(args) {

		var selectedSalesManagerId = args.value;

		console.log('Selected SalesManagerId:', selectedSalesManagerId);

		SalesManagerIddd = selectedSalesManagerId;
	}


	$(document).ready(function () {
		// Create an object to store sums for each secId
		var sectorSums = {};


		$("#Add_Target").click( async function (e) {
			try{

				var SectorValue = $('#SectorId').val();
				var CategoryValue = $('#CategoryId').val();
				var MonthValue = $('#MonthId').val();
				var SalesManValue = $('#SalesManagerId').val();
				var CategoryWiseValue = parseFloat($('#CategoryWiseTarget').val()) || 0;


				if (SectorValue == null || CategoryValue == null || MonthValue == null || isNaN(CategoryWiseValue)) {
					alert("Month, Sector, Category, CategoryWiseValue can't be empty");
					return;
				} else {
					// Your existing code for the case when all conditions are met
				}



				await GetCategoryId();
				await GetMonthId();

				var secId = selectedSectorValue;
				//var SectorValue = $('#SectorId').val();
				//var CategoryValue = $('#CategoryId').val();
				var CategoryId = selectedCategoryValue;
				var CategoryText = $('#CategoryId option:selected').text();
				//var CategoryWiseValue = parseFloat($('#CategoryWiseTarget').val()) || 0; // Parse as float, default to 0 if not a valid number
				//var MonthValue = $('#MonthId').val();
				var MonthId = selectedMonthValue;


				if (SectorValue && CategoryValue && MonthValue && !isNaN(CategoryWiseValue)) {
					// Check if the secId already exists in the sums object
					if (sectorSums.hasOwnProperty(SectorValue)) {
						// If exists, add the CategoryWiseValue to the existing sum
						sectorSums[SectorValue] += CategoryWiseValue;
					} else {
						// If not exists, create a new entry with the CategoryWiseValue
						sectorSums[SectorValue] = CategoryWiseValue;
					}

					updateFloatingTextboxes();

					//var row = "<tr><td data-value='" + secId + "'>" + SectorValue + "</td><td data-value='" + CategoryId + "'>" + CategoryValue + "</td><td data-value='" + CategoryWiseValue + "'>" + CategoryWiseValue + "</td><td><button class='delRowBtn'><i class='ion-trash-b' style='color: red;'></i></button></td></tr>";

					var row = "<tr><td data-value='" + MonthId + "'>" + MonthValue + "</td><td data-value='" + secId + "'>" + SectorValue + "</td><td data-value='" + SalesManagerIdd + "'>" + SalesManValue + "</td><td data-value='" + CategoryId + "'>" + CategoryValue + "</td><td data-value='" + CategoryWiseValue + "'>" + CategoryWiseValue + "</td><td><button class='delRowBtn'><i class='icon-trash' style='color: red;'></i></button></td></tr>";



					$('#Target_tb').append(row);
				} else {
					// Handle empty values or show an error message
					alert("Month, Sector, Category, and Category Wise values cannot be empty or Category Wise value must be a valid number.");
				}
			}
			
			catch (error) {
				console.error(error);
			}

		});

		// Example function to retrieve the sum for a specific secId
		function getSumForSecId(SectorValue) {
			return sectorSums[SectorValue] || 0; // Return 0 if secId not found
		}

		$(document).on("click", ".delRowBtn", function () {
			var row = $(this).closest("tr");
			//var SectorValue = row.find('td:first').text();
			var SectorValue = row.find('td').eq(1).text();

			// Subtract the CategoryWiseValue from the corresponding sector sum
			var CategoryWiseValue = parseFloat(row.find('td[data-value]').last().text()) || 0;
			if (sectorSums.hasOwnProperty(SectorValue)) {
				sectorSums[SectorValue] -= CategoryWiseValue;
				updateFloatingTextboxes();
			}

			row.remove();
		});


		


		// Function to update or create floating textboxes below the table
		function updateFloatingTextboxes() {
			var sectorTableBody = $('#Sector_tb'); // Get the tbody of the Sector table

			// Iterate through each sector and create/update a row in the #Sector table
			for (var sector in sectorSums) {
				if (sectorSums.hasOwnProperty(sector)) {
					var sumValue = sectorSums[sector];

					// Update or create rows in the #Sector table
					var existingRow = sectorTableBody.find('tr[data-sector="' + sector + '"]');
					if (existingRow.length) {
						// Update existing row
						existingRow.find('td[data-value="Total Target"]').text(sumValue);
					} else {
						// Create new row
						var newRow = '<tr data-sector="' + sector + '"><td>' + sector + '</td><td data-value="Total Target">' + sumValue + '</td></tr>';
						sectorTableBody.append(newRow);
					}
				}
			}
		}
	});


	$(document).ready(function () {
		// Create an object to store sums for each secId
		var sectorSums = {};

		$("#Add_Targetd").click(async function (e) {
			try {

				var SectorValue = $('#SectorIdd').val();
				var BrandValue = $('#BrandIdd').val();
				var CategoryValue = $('#CategoryIdd').val();
				var MonthValue = $('#MonthIdd').val();
				var SalesManValue = $('#SalesManagerIdd').val();
				var CategoryWiseValue = parseFloat($('#CategoryWiseTargetd').val()) || 0;

				if (SectorValue == null || BrandValue == null || CategoryValue == null || MonthValue == null || isNaN(CategoryWiseValue)) {
					alert("SectorValue, BrandValue, CategoryValue, MonthValue and CategoryWiseValue can't be empty");
					return;
				} else {
					// Your existing code for the case when all conditions are met
				}




				await GetCategoryIdd();
				await GetMonthIdd();
				await GetBrandIdd();

				var secId = selectedSectorValued;
				//var SectorValue = $('#SectorIdd').val();
				var BrandId = selectedBrandValued;
				//var BrandValue = $('#BrandIdd').val();
				//var CategoryValue = $('#CategoryIdd').val();
				var CategoryId = selectedCategoryValued;
				var CategoryText = $('#CategoryId option:selected').text();
				//var CategoryWiseValue = parseFloat($('#CategoryWiseTargetd').val()) || 0; // Parse as float, default to 0 if not a valid number
				//var MonthValue = $('#MonthIdd').val();
				var MonthId = selectedMonthValued;


				if (SectorValue && MonthValue && CategoryValue && BrandValue && !isNaN(CategoryWiseValue)) {
					//// Check if the secId already exists in the sums object
					//if (sectorSums.hasOwnProperty(SectorValue)) {
					//	// If exists, add the CategoryWiseValue to the existing sum
					//	sectorSums[SectorValue] += CategoryWiseValue;
					//} else {
					//	// If not exists, create a new entry with the CategoryWiseValue
					//	sectorSums[SectorValue] = CategoryWiseValue;
					//}

					//updateFloatingTextboxes();

					//var row = "<tr><td data-value='" + secId + "'>" + SectorValue + "</td><td data-value='" + CategoryId + "'>" + CategoryValue + "</td><td data-value='" + CategoryWiseValue + "'>" + CategoryWiseValue + "</td><td><button class='delRowBtn'><i class='ion-trash-b' style='color: red;'></i></button></td></tr>";


					///*<td data-value='" + SalesManagerIdd + "'>" + SalesManValue + "</td>*/

					var row = "<tr><td data-value='" + MonthId + "'>" + MonthValue + "</td><td data-value='" + SalesManagerIddd + "'>" + SalesManValue + "</td><td data-value='" + secId + "'>" + SectorValue + "</td><td data-value='" + BrandId + "'>" + BrandValue + "</td><td data-value='" + CategoryId + "'>" + CategoryValue + "</td><td data-value='" + CategoryWiseValue + "'>" + CategoryWiseValue + "</td><td><button class='delRowBtnd'><i class='icon-trash' style='color: red;'></i></button></td></tr>";



					$('#Target_tbd').append(row);
				} else {
					// Handle empty values or show an error message
					alert("Sector, Category, Month and Category Wise values cannot be empty or Category Wise value must be a valid number.");
				}
			}

			catch (error) {
				console.error(error);
			}

		});

		// Example function to retrieve the sum for a specific secId
		function getSumForSecId(SectorValue) {
			return sectorSums[SectorValue] || 0; // Return 0 if secId not found
		}

		//$(document).on("click", ".delRowBtn", function () {
		//	var row = $(this).closest("tr");
		//	//var SectorValue = row.find('td:first').text();
		//	var SectorValue = row.find('td').eq(1).text();

		//	// Subtract the CategoryWiseValue from the corresponding sector sum
		//	var CategoryWiseValue = parseFloat(row.find('td[data-value]').last().text()) || 0;
		//	if (sectorSums.hasOwnProperty(SectorValue)) {
		//		sectorSums[SectorValue] -= CategoryWiseValue;
		//		updateFloatingTextboxes();
		//	}

		//	row.remove();
		//});

		$(document).on("click", ".delRowBtnd", function () {
			$(this).closest("tr").remove();
		});





		// Function to update or create floating textboxes below the table
		//function updateFloatingTextboxes() {
		//	var sectorTableBody = $('#Sector_tb'); // Get the tbody of the Sector table

		//	// Iterate through each sector and create/update a row in the #Sector table
		//	for (var sector in sectorSums) {
		//		if (sectorSums.hasOwnProperty(sector)) {
		//			var sumValue = sectorSums[sector];

		//			// Update or create rows in the #Sector table
		//			var existingRow = sectorTableBody.find('tr[data-sector="' + sector + '"]');
		//			if (existingRow.length) {
		//				// Update existing row
		//				existingRow.find('td[data-value="Total Target"]').text(sumValue);
		//			} else {
		//				// Create new row
		//				var newRow = '<tr data-sector="' + sector + '"><td>' + sector + '</td><td data-value="Total Target">' + sumValue + '</td></tr>';
		//				sectorTableBody.append(newRow);
		//			}
		//		}
		//	}
		//}
	});












</script>

<script>
	$(document).ready(function () {
		$("#btnSave").click(function (e) {
			var itemDetails = [];
			var itemDetailsd = [];

			$.each($("#Statee tbody tr"), function () {
				var $irow = $(this),
					rowObj = {};

				// Retrieve the data-value attributes
				//var SectorId = parseInt($irow.find("td:eq(0)").data("value"));
				//var CategoryId = $irow.find("td:eq(1)").data("value");
				//var MonthlyCategoryWiseTarget = $irow.find("td:eq(2)").data("value");

				var Month = parseInt($irow.find("td:eq(0)").data("value"));
				var SectorId = parseInt($irow.find("td:eq(1)").data("value"));
				var SalesMan = parseInt($irow.find("td:eq(2)").data("value"));
				var CategoryId = $irow.find("td:eq(3)").data("value");
				var MonthlyCategoryWiseTarget = $irow.find("td:eq(4)").data("value");


				var a = {
					"monthId": Month,
					"sector": SectorId,
					"salesManagerId": SalesMan,
					"category": CategoryId,
					"monthlyCategoryWiseTarget": MonthlyCategoryWiseTarget,
					"createdBy": @(Int64.Parse(User.Claims.FirstOrDefault(x => x.Type == "UserId").Value))
				};

				itemDetails.push(a);
			});

			console.log("itemDetails:", itemDetails);

			console.log(itemDetails);

			var model = {
				"Targets": itemDetails

			};

			$.ajax({
				type: "POST",
				url: "/SalesExecutive/SalesAdmin/CreateTargetBySalesAdmin",
				data: JSON.stringify(model),
				//data: JSON.stringify(model),
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log("Data saved successfully:", result);
					// You might want to handle success feedback here
				},
				error: function (error) {
					console.log("Error saving data:", error);
					// Handle the error or provide feedback to the user
				}
			});




			$.each($("#Stateed tbody tr"), function () {
				var $irow = $(this),
					rowObj = {};

				// Retrieve the data-value attributes
				//var SectorId = parseInt($irow.find("td:eq(0)").data("value"));
				//var CategoryId = $irow.find("td:eq(1)").data("value");
				//var MonthlyCategoryWiseTarget = $irow.find("td:eq(2)").data("value");

				var Month = parseInt($irow.find("td:eq(0)").data("value"));
				var SalesManId = parseInt($irow.find("td:eq(1)").data("value"));
				var SectorId = parseInt($irow.find("td:eq(2)").data("value"));
				var BrandId = parseInt($irow.find("td:eq(3)").data("value"));
				var CategoryId = $irow.find("td:eq(4)").data("value");
				var MonthlyCategoryWiseTarget = $irow.find("td:eq(5)").data("value");


				var a = {
					"salesManagerID": SalesManId,
					"brandId": BrandId,
					"monthId": Month,
					"sectorId": SectorId,
					"categoryId": CategoryId,
					"monthlyBrandWiseTarget": MonthlyCategoryWiseTarget,
					"createdBy": @(Int64.Parse(User.Claims.FirstOrDefault(x => x.Type == "UserId").Value))
						};

				itemDetailsd.push(a);
			});

			console.log("itemDetails:", itemDetailsd);

			console.log(itemDetailsd);

			var model2 = {
				"Targetss": itemDetailsd

			};

			$.ajax({
				type: "POST",
				url: "/SalesExecutive/BrandWiseTarget/BrandWiseTargetCreate",
				data: JSON.stringify(model2),
				//data: JSON.stringify(model),
				contentType: "application/json",
				dataType: "json",
				success: function (result) {
					console.log("Data saved successfully:", result);
					// You might want to handle success feedback here
				},
				error: function (error) {
					console.log("Error saving data:", error);
					// Handle the error or provide feedback to the user
				}
			});
		});
	});
</script>

<script>
	$(document).ready(function () {
		$('#btnSave').on('click', function () {
			// Check if any value is present in the four fields
			var monthIdValue = $('#MonthIdd').val();
			var brandIdValue = $('#BrandIdd').val();
			var sectorIdValue = $('#SectorIdd').val();
			var categoryIdValue = $('#CategoryIdd').val();
			var categoryWiseTargetValue = $('#CategoryWiseTargetd').val();

			if (monthIdValue && brandIdValue && sectorIdValue && categoryIdValue && categoryWiseTargetValue) {
				// All fields have values, proceed with redirection
				window.location.href = "/SalesExecutive/SalesAdmin/SalesAdminTargetView";
			} else {
				alert("Please Add the missing value");
			}
		});
	});
</script>


@section scripts{
    <script>
        $(function () {
            $("#btttnSaved").click(function (e) {
                if (!document.getElementById("formPost").checkValidity()) {
                    e.preventDefault();
                }
                else {
                    var itemDetails = [];

                    $.each($("#Statee tbody tr"), function () {
                        var $irow = $(this),
                            rowObj = {};

                        // Retrieve the data-value attributes
                        var Sector = parseInt($irow.find("td:eq(0)").data("value"));
                        var Category = parseInt($irow.find("td:eq(1)").data("value"));

                        var a = {
							"userId": Sector,
							"stateId": Category
                        }
                        itemDetails.push(a);
                    });
                    console.log("itemDetails:", itemDetails);

                    // Show preloader
                    var preloader = $("#preloader");
                    preloader.removeClass("d-none");
                    var model = {
						"sectorId": parseInt($("#SectorId").val()),
						"categoryId": parseInt($("#CategoryId").val()),
                        stateUserDTOs: itemDetails,
                    }
                    console.log(model)
      //              $.ajax({
      //                  type: "POST",
						//url: "/SalesExecutive/SalesAdmin/CreateTargetBySalesAdmin",
      //                  data: JSON.stringify(model),
      //                  contentType: "application/json; charset=utf-8",                        
      //                  dataType: "json",                        

      //                  success: function (data, statusText, xhr) {
                        //    if (xhr.status === 200) {
                        //        Swal.fire({
                        //            icon: "success",
                        //            title: "State User",
                        //            text: "Successfully created!",
                        //        }).then(function () {
                        //            location.reload(); // Refresh the page
                        //        });

                        //        //preloader.addClass("d-none");
                        //    } else if (data.status === "Duplicate") {
                        //        Swal.fire({
                        //            icon: "warning",
                        //            title: "Validation Alert!",
                        //            text: data.responseMsg,
                        //        }).then(function () {
                        //            location.reload(); // Refresh the page
                        //        });
                        //    } else if (data.status === "error") {
                        //        Swal.fire({
                        //            icon: "warning",
                        //            title: "Validation Alert!",
                        //            text: data.responseMsg,
                        //        }).then(function () {
                        //            location.reload(); // Refresh the page
                        //        });
                        //    } else {
                        //        Swal.fire({
                        //            icon: "warning",
                        //            title: "Validation Alert!",
                        //            text: "Something unexpected!",
                        //        }).then(function () {
                        //            location.reload(); // Refresh the page
                        //        });
                        //    }
                        //    preloader.addClass("d-none");
                        //},

						}

						console.log(data)
                        error: function (data) {
                            if (data.status == 401) {
                                window.location.replace('/Message/TokenExpire');
                            } else if (data.status == 403) {
                                window.location.replace('/Message/Unauthorize');
                            } else if (data.status == 400) {
                                sweetAlert("Validation Alert!", "Please check input data!", "warning");
                            }
                        }
                    });
                }
            });
        });


		//GetUser()
		//function GetUser() {
		//	var opt = '';
		//	$.ajax({
		//		type: "GET",
		//		url: "/WareHouse/Sector/GetSectorList",
		//		contentType: "application/json; charset=utf-8",
		//		dataType: "json",
		//		success: function (res) {
		//			console.log(res)
		//			var options = [];
		//			options.push('<option value="">Please Select </option>');
		//			for (var i = 0; i < res.data.length; i++) {
		//				//if (Id == res.data[i].userId) {
		//				//	opt = 'selected'
		//				//} else {
		//				//	opt = '';
		//				//}
		//				options.push('<option value="' + res.data[i].sectorId + '" ' + opt + '>' + res.data[i].sectorName + '</option>');
		//			}
		//			$("#SectorId").html(options.join(''));
		//		},
		//		error: function (data) {
		//			if (data.status == 401) {
		//				window.location.replace('/Message/TokenExpire');
		//			} else if (data.status == 403) {
		//				window.location.replace('/Message/Unauthorize');
		//			}
		//		}
		//	});
		//}

		//GetState()
		//function GetState(Id) {
		//	var opt = '';
		//	$.ajax({
		//		type: "GET",
		//		url: "/WareHouse/Sector/GetCategoryList",
		//		contentType: "application/json; charset=utf-8",				
		//		dataType: "json",
		//		success: function (res) {
		//			console.log(res)
		//			var options = [];
		//			options.push('<option value="">Please Select </option>');
		//			for (var i = 0; i < res.data.length; i++) {
		//				if (Id == res.data[i].stateId) {
		//					opt = 'selected'
		//				} else {
		//					opt = '';
		//				}
		//				options.push('<option value="' + res.data[i].stateId + '" ' + opt + '>' + res.data[i].stateName + '</option>');
		//			}
		//			$("#CategoryId").html(options.join(''));
		//		},
		//		error: function (data) {
		//			if (data.status == 401) {
		//				window.location.replace('/Message/TokenExpire');
		//			} else if (data.status == 403) {
		//				window.location.replace('/Message/Unauthorize');
		//			}
		//		}
		//	});
		//}


    //        $("#Add_Target").click(function (e) {
    //            var SectorValue = $('#SectorId').val();
				//var SectorText = $('#SectorId option:selected').text();
    //            var CategoryValue = $('#CategoryId').val();
				//var CategoryText = $('#CategoryId option:selected').text();

				//var row = "<tr><td data-value='" + SectorValue + "'>" + SectorText + "</td><td data-value='" + CategoryValue + "'>" + CategoryText + "</td><td><button class='delRowBtn'><i class='ion-trash-b' style='color: red;'></i></button></td></tr>";

    //            $('#Target_tb').append(row);
    //        });


    //        $(document).on("click", ".delRowBtn", function () {
    //            $(this).closest("tr").remove();
    //        });        

    </script>

}

