// <auto-generated />
using System;
using CloudVOffice.Data.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudVOffice.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CloudVOffice.Core.Domain.Banners.Banner", b =>
                {
                    b.Property<long>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BannerId"));

                    b.Property<string>("BannerImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BannerId");

                    b.ToTable("Banners", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Buyers.BuyerRegistration", b =>
                {
                    b.Property<long>("BuyerRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BuyerRegistrationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("GSTNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PinCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RetailModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesExecutiveContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesExecutiveUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("ShopImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("BuyerRegistrationId");

                    b.ToTable("BuyerRegistrations", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.CompanyDetails", b =>
                {
                    b.Property<int>("CompanyDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyDetailsId"));

                    b.Property<string>("ABBR")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfIncorporation")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyDetailsId");

                    b.ToTable("CompanyDetails", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Company.LetterHead", b =>
                {
                    b.Property<int>("LetterHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetterHeadId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LetterHeadAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterAlign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadFooterImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageFooterWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageHeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadImageWidth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LetterHeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LetterHeadId");

                    b.ToTable("LetterHeads", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.Property<int>("EmailAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailAccountId"));

                    b.Property<string>("AlternativeEmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Domain")
                        .HasColumnType("int");

                    b.Property<string>("EmailAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultSending")
                        .HasColumnType("bit");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailAccountId");

                    b.HasIndex("Domain");

                    b.ToTable("EmailAccounts", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailDomain", b =>
                {
                    b.Property<int>("EmailDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailDomainId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncomingIsIMAP")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("IncomingIsStartTLs")
                        .HasColumnType("bit");

                    b.Property<int>("IncomingPort")
                        .HasColumnType("int");

                    b.Property<string>("IncomingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OutgoingIsSsl")
                        .HasColumnType("bit");

                    b.Property<bool>("OutgoingIsTLs")
                        .HasColumnType("bit");

                    b.Property<int>("OutgoingPort")
                        .HasColumnType("int");

                    b.Property<string>("OutingServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailDomainId");

                    b.ToTable("EmailDomains", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.DeliveryPartners.DeliveryPartner", b =>
                {
                    b.Property<long>("DeliveryPartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DeliveryPartnerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignedCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChassisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DriverContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insurance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mileage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PollutionCertificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationYear")
                        .HasColumnType("datetime2");

                    b.Property<long?>("RetailModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleBackPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleFrontPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("DeliveryPartnerId");

                    b.ToTable("DeliveryPartners", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DPO", b =>
                {
                    b.Property<long>("DPOId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DPOId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DPOUniqueNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("DistributorId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("DPOId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("DPO", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DPOItems", b =>
                {
                    b.Property<long>("DPOItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DPOItemsId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("DPOId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DPOItemsId");

                    b.HasIndex("DPOId");

                    b.HasIndex("ItemId");

                    b.ToTable("DPOItems", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DSO", b =>
                {
                    b.Property<long>("DSOId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DSOId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("DistributorId")
                        .HasColumnType("bigint");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderUniqueNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PincodeId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DSOId");

                    b.ToTable("DSO");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DSOItems", b =>
                {
                    b.Property<long>("DSOItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DSOItemsId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("DSOId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DSOItemsId");

                    b.HasIndex("DSOId");

                    b.HasIndex("ItemId");

                    b.ToTable("DSOItems");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributors.DistributorAssign", b =>
                {
                    b.Property<long>("DistributorAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DistributorAssignId"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("DistributorRegistrationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PinCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DistributorAssignId");

                    b.HasIndex("BrandId");

                    b.HasIndex("DistributorRegistrationId");

                    b.HasIndex("PinCodeId");

                    b.ToTable("DistributorAssigns", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributors.DistributorRegistration", b =>
                {
                    b.Property<long>("DistributorRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DistributorRegistrationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("GSTNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WareHuoseId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("DistributorRegistrationId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("DistributorRegistrations", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.EmailTemplates.EmailTemplate", b =>
                {
                    b.Property<int>("EmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailTemplateId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("DefaultSendingAccount")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailTemplateDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmailTemplateId");

                    b.ToTable("EmailTemplates", (string)null);

                    b.HasData(
                        new
                        {
                            EmailTemplateId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3570),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\">\r\n                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">{%welcometitle%} </h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table border=\"0\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\"><span style=\"color:rgb(22,123,158); font-size:16px; margin-right:2px; font-weight:600\"></span>{%helloname%}</h5>\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%accountcreatetionmessage%}</p>\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%loginidmessage%}</p>\r\n\r\n\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">{%aditionalmessage%}</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br />\r\n                                                                                {%copylinkfrommessage%}\r\n                                                                            </div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table border=\"0\" style=\"width:100%\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"></div> </div></span>\r\n</div>",
                            EmailTemplateName = "WelcomeEmail",
                            Subject = ""
                        },
                        new
                        {
                            EmailTemplateId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3580),
                            Deleted = false,
                            EmailTemplateDescription = "<div role=\"document\">\r\n    <div class=\"_rp_T4 _rp_U4 ms-font-weight-regular ms-font-color-neutralDark\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_w\" class=\"_rp_T4\" style=\"display: none;\"><br></div>  <div autoid=\"_rp_x\" class=\"_rp_T4\" id=\"Item.MessagePartBody\" style=\"\">\r\n        <div class=\"_rp_U4 ms-font-weight-regular ms-font-color-neutralDark rpHighlightAllClass rpHighlightBodyClass\" id=\"Item.MessageUniqueBody\" style=\"font-family: wf_segoe-ui_normal, &quot;Segoe UI&quot;, &quot;Segoe WP&quot;, Tahoma, Arial, sans-serif, serif, EmojiFont;\">\r\n            <div class=\"rps_ad57\">\r\n                <div>\r\n                    <div>\r\n                        <div style=\"margin: 0px; padding: 0px; font-family: Verdana, Helvetica, Arial, sans-serif, serif, EmojiFont; color: rgb(103, 103, 103);\">\r\n                            <table cellpadding=\"0\" cellspacing=\"0\" style=\"padding-top:0px; background-color:#FFFFFF; width:100%; border-collapse:separate\" class=\"e-rte-table\">\r\n                                <tbody>\r\n                                    <tr>\r\n                                        <td align=\"center\" class=\"\">\r\n                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"600\" style=\"padding:0px 24px 10px; background-color:white; border-collapse:separate; border:1px solid #e7e7e7; border-bottom:none\" class=\"e-rte-table\">\r\n                                                <tbody>\r\n                                                    <tr>\r\n                                                        <td><br></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td align=\"center\" style=\"min-width:590px\">\r\n                                                            <table cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"padding:20px 0 0; border-collapse:separate\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td valign=\"middle\" class=\"\">\r\n                                                                            <h1 style=\"color:#676767; font-weight:400; margin:0px\">Password Reset Request</h1>\r\n                                                                        </td>\r\n                                                                        <td valign=\"middle\" align=\"right\" width=\"200px\">{%emailogo%}</td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td colspan=\"2\" style=\"text-align:center\">\r\n                                                                            <hr width=\"100%\" style=\"background-color:rgb(204,204,204); border:medium none; clear:both; display:block; font-size:0px; min-height:1px; line-height:0; margin:4px 0px 16px 0px\">\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td style=\"min-width:590px\">\r\n                                                            <table class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td class=\"\">\r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <h5 style=\"font-weight:400; margin-bottom:0; font-size:16px; color:#676767\">Hello {%helloname%}</h5><div><br></div>\r\n                                                                                <p>We have received a request to reset your account password. To proceed with the password reset, please click on the link below:</p>\r\n                                                                                <div style=\"margin:20px 0 0 0; text-align:center\">{%setpasswordlink%}</div>\r\n                                                                                <br>If you did not request a password reset, Please ignore this email. Your account will&nbsp;<span style=\"background-color: transparent; text-align: inherit;\">remain secure, and no action is required.</span></div><div style=\"margin-left:1.2rem; margin-bottom:1em\"><span style=\"background-color: transparent; text-align: inherit;\"><p>For security reasons, this link will expire in 2 hours. If you&nbsp;<span style=\"background-color: transparent; text-align: inherit;\">are unable to reset your password within this time frame,&nbsp;</span><span style=\"background-color: transparent; text-align: inherit;\">please request another password reset.</span></p></span></div>\r\n                                                                         \r\n                                                                            <div style=\"margin-left:1.2rem; margin-bottom:1em\">\r\n                                                                                <p style=\"color:#676767; line-height:145%; margin:10px 0 0 0; font-size:16px\">\r\n                                                                                    {%emailsignature%}\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:center; border-top:1px solid rgb(230,230,230); padding-bottom:20px; padding-top:15px; line-height:125%; font-size:11px; margin:20px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); font-size:10px\">© Copyright {%companyname%}, {%address%} </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                    <tr>\r\n                                                                        <td align=\"right\">\r\n                                                                            <div style=\" margin:0 20px\">{%footerletterhera%}</div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td>\r\n                                                            <table style=\"width:100%\" class=\"e-rte-table\">\r\n                                                                <tbody>\r\n                                                                    <tr>\r\n                                                                        <td>\r\n                                                                            <div style=\"text-align:justify; border-top:1px solid rgb(230,230,230); padding-bottom:10px; padding-top:10px; line-height:125%; font-size:10px; margin:25px 20px 0 20px\">\r\n                                                                                <p style=\"color:rgb(115,115,115); margin:0; font-size:10px\">\r\n                                                                                    The information contained in this e-mail message and/or attachments to it may contain confidential\r\n                                                                                    or privileged information. If you are not the intended recipient, any dissemination,use, review, distribution,\r\n                                                                                    printing or copying of the information contained in this email message and/or attachments to it are strictly prohibited.\r\n                                                                                    If you have received this communication in error, please notify us by reply e-mail or telephone and immediately\r\n                                                                                    and permanently delete the message and any attachments. Thank you.\r\n                                                                                </p>\r\n                                                                            </div>\r\n                                                                        </td>\r\n                                                                    </tr>\r\n                                                                </tbody>\r\n                                                            </table>\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                        </td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div> <div class=\"_rp_c5\" style=\"display: none;\"><br></div>\r\n    </div>  <span class=\"PersonaPaneLauncher\"><div ariatabindex=\"-1\" class=\"_pe_d _pe_62\" aria-expanded=\"false\" tabindex=\"-1\" aria-haspopup=\"false\">  <div style=\"display: none;\"><br></div> </div></span>\r\n</div>",
                            EmailTemplateName = "PasswordReset",
                            Subject = "Password Reset Request"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("ActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LogInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogOutTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogs", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ActivityLogType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemKeyword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityLogTypes", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.ErrorLog", b =>
                {
                    b.Property<long>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ErrorLogId"));

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLogs", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Logging.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<int>("LogLevelId")
                        .HasColumnType("int");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferrerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Orders.BuyerOrder", b =>
                {
                    b.Property<long>("BuyerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BuyerOrderId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("BuyerCustomerLoginID")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderUniqueNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BuyerOrderId");

                    b.ToTable("BuyerOrders", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Orders.BuyerOrderItems", b =>
                {
                    b.Property<long>("BuyerOrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BuyerOrderItemsId"));

                    b.Property<long>("BuyerOrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BuyerOrderItemsId");

                    b.HasIndex("BuyerOrderId");

                    b.HasIndex("ItemId");

                    b.ToTable("BuyerOrderItems", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Orders.Checkout", b =>
                {
                    b.Property<long>("CheckoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CheckoutId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CheckoutId");

                    b.HasIndex("ItemId");

                    b.ToTable("Checkouts", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 10000L);

                    b.Property<int?>("ApplicationId1")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("ApplicationId1");

                    b.ToTable("Applications", (string)null);

                    b.HasData(
                        new
                        {
                            ApplicationId = 1,
                            ApplicationName = "Applications",
                            AreaName = "Application",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2308),
                            Deleted = false,
                            IconClass = "icon-th-large-outline",
                            IconImageUrl = "/appstatic/images/applications.png",
                            IsGroup = true,
                            Url = "/Application/Applications/InstalledApps"
                        },
                        new
                        {
                            ApplicationId = 2,
                            ApplicationName = "Setup",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2316),
                            Deleted = false,
                            IconClass = "icon-cogs",
                            IconImageUrl = "/appstatic/images/setup.png",
                            IsGroup = true,
                            Url = "/Setup/Setup/Dashboard"
                        },
                        new
                        {
                            ApplicationId = 3,
                            ApplicationName = "Company Settings",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2319),
                            Deleted = false,
                            IconClass = "icon-office",
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 4,
                            ApplicationName = "Company",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2321),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/CompanyDetails/CompanyDetailsView"
                        },
                        new
                        {
                            ApplicationId = 5,
                            ApplicationName = "Letter Head",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2323),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 3,
                            Url = "/Setup/LetterHead/LetterHeadView"
                        },
                        new
                        {
                            ApplicationId = 6,
                            ApplicationName = "User",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2325),
                            Deleted = false,
                            IconClass = "icon-users",
                            IsGroup = true,
                            Parent = 2,
                            Url = ""
                        },
                        new
                        {
                            ApplicationId = 7,
                            ApplicationName = "User List",
                            AreaName = "Setup",
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2327),
                            Deleted = false,
                            IsGroup = false,
                            Parent = 6,
                            Url = "/Setup/User/UserList"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.InstalledApplication", b =>
                {
                    b.Property<int>("InstalledApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstalledApplicationId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Version")
                        .HasColumnType("float");

                    b.HasKey("InstalledApplicationId");

                    b.ToTable("InstalledApplications", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.Property<long>("RoleAndApplicationWisePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleAndApplicationWisePermissionId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleAndApplicationWisePermissionId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleAndApplicationWisePermissions", (string)null);

                    b.HasData(
                        new
                        {
                            RoleAndApplicationWisePermissionId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2858),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2862),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2864),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2865),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2867),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2868),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2869),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2871),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2872),
                            Deleted = false,
                            RoleId = 1
                        },
                        new
                        {
                            RoleAndApplicationWisePermissionId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(2874),
                            Deleted = false,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.UserWiseViewMapper", b =>
                {
                    b.Property<long>("UserWiseViewMapperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserWiseViewMapperId"), 10000L);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserWiseViewMapperId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWiseViewMappers", (string)null);

                    b.HasData(
                        new
                        {
                            UserWiseViewMapperId = 1L,
                            ApplicationId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3320),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 2L,
                            ApplicationId = 2,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3324),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 3L,
                            ApplicationId = 3,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3325),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 4L,
                            ApplicationId = 4,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3327),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 5L,
                            ApplicationId = 5,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3328),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 6L,
                            ApplicationId = 6,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3330),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 7L,
                            ApplicationId = 7,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3332),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 8L,
                            ApplicationId = 8,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3333),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 9L,
                            ApplicationId = 9,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3335),
                            Deleted = false,
                            UserId = 1L
                        },
                        new
                        {
                            UserWiseViewMapperId = 10L,
                            ApplicationId = 10,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(3336),
                            Deleted = false,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.ProductCategories.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.ProductCategories.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectorId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SectorId");

                    b.ToTable("Sectors", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.ProductCategories.SubCategory1", b =>
                {
                    b.Property<int>("SubCategory1Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategory1Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("GSTId")
                        .HasColumnType("bigint");

                    b.Property<string>("HSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory1Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory1Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCategory1Id");

                    b.ToTable("SubCategories1", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.ProductCategories.SubCategory2", b =>
                {
                    b.Property<int>("SubCategory2Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategory2Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategory1Id")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory2Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory2Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCategory2Id");

                    b.ToTable("SubCategories2", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.ProductCategories.SubCategory3", b =>
                {
                    b.Property<int>("SubCategory3Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategory3Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategory1Id")
                        .HasColumnType("int");

                    b.Property<int>("SubCategory2Id")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory3Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory3Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCategory3Id");

                    b.ToTable("SubCategories3", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.ProductCategories.SubCategory4", b =>
                {
                    b.Property<int>("SubCategory4Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategory4Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategory1Id")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategory2Id")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategory3Id")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory4Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory4Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubCategory4Id");

                    b.ToTable("SubCategories4", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.RetailerModel.ChangePassword", b =>
                {
                    b.Property<long>("ChangePasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ChangePasswordId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NewPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetypePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChangePasswordId");

                    b.ToTable("ChangePasswords", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.RetailerModel.RetailLogin", b =>
                {
                    b.Property<long>("RetailLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RetailLoginId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserMobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RetailLoginId");

                    b.ToTable("RetailLogins", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.RetailerModel.RetailModel", b =>
                {
                    b.Property<int>("RetailModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetailModelId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RetailerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RetailModelId");

                    b.ToTable("RetailModels", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.BrandWiseTarget", b =>
                {
                    b.Property<long>("BrandWiseTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BrandWiseTargetId"));

                    b.Property<long?>("BrandId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("MonthId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("MonthlyBrandWiseTarget")
                        .HasColumnType("float");

                    b.Property<long?>("SalesExecutiveRegistrationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalesManagerID")
                        .HasColumnType("bigint");

                    b.Property<int?>("SectorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("BrandWiseTargetId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.HasIndex("SectorId");

                    b.ToTable("BrandWiseTargets", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesAdminTarget", b =>
                {
                    b.Property<long>("SalesAdminTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesAdminTargetId"));

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("MonthId")
                        .HasColumnType("bigint");

                    b.Property<double?>("MonthlyBrandWiseTarget")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlyCategoryWiseTarget")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlySectorWiseTarget")
                        .HasColumnType("float");

                    b.Property<string>("SalesAdminTargetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SalesManagerId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("SectorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesAdminTargetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.HasIndex("SalesManagerId");

                    b.HasIndex("SectorId");

                    b.ToTable("SalesAdminTargets", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesExecutiveRegistration", b =>
                {
                    b.Property<long>("SalesExecutiveRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesExecutiveRegistrationId"));

                    b.Property<string>("AadharCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PANCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RetailModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesExecutiveName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesExecutiveUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("SalesExecutiveRegistrationId");

                    b.ToTable("SalesExecutiveRegistrations", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesExecutiveTarget", b =>
                {
                    b.Property<long>("SalesExecutiveTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesExecutiveTargetId"));

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("MonthId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("MonthlyBrandWiseTarget")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlyCategoryWiseTarget")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlySectorWiseTarget")
                        .HasColumnType("float");

                    b.Property<long?>("SalesExecutiveRegistrationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("SectorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesExecutiveTargetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.HasIndex("SalesExecutiveRegistrationId");

                    b.HasIndex("SectorId");

                    b.ToTable("SalesExecutiveTargets", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesManager", b =>
                {
                    b.Property<long>("SalesManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesManagerId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesManagerId");

                    b.ToTable("SalesManagers", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesManagerTarget", b =>
                {
                    b.Property<long>("SalesManagerTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesManagerTargetId"));

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("MonthId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("MonthlyBrandWiseTarget")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlyCategoryWiseTarget")
                        .HasColumnType("float");

                    b.Property<double?>("MonthlySectorWiseTargetByAdmin")
                        .HasColumnType("float");

                    b.Property<int?>("SectorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("SalesManagerTargetId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MonthId");

                    b.HasIndex("SectorId");

                    b.HasIndex("UserId");

                    b.ToTable("SalesManagerTargets", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sellers.SellerFarmingProduct", b =>
                {
                    b.Property<long>("SellerFarmingProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SellerFarmingProductId"));

                    b.Property<long?>("BrandId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("GSTId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("HSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MinQty")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float");

                    b.Property<double?>("QtyPerKg")
                        .HasColumnType("float");

                    b.Property<int?>("SubCategory1Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SubCategory2Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SellerFarmingProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GSTId");

                    b.HasIndex("SubCategory1Id");

                    b.HasIndex("SubCategory2Id");

                    b.HasIndex("UnitId");

                    b.ToTable("SellerFarmingProducts", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sellers.SellerProductEntry", b =>
                {
                    b.Property<long>("SellerProductEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SellerProductEntryId"));

                    b.Property<long?>("BrandId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("CaseWeight")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GSTId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("HSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HandlingTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MRP")
                        .HasColumnType("float");

                    b.Property<double?>("MRPCaseCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float");

                    b.Property<double?>("SalesCaseCost")
                        .HasColumnType("float");

                    b.Property<double>("SalesCost")
                        .HasColumnType("float");

                    b.Property<string>("SellerProductCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategory1Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("SubCategory2Id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("UnitPerCase")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SellerProductEntryId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GSTId");

                    b.HasIndex("HandlingTypeId");

                    b.HasIndex("SubCategory1Id");

                    b.HasIndex("SubCategory2Id");

                    b.HasIndex("UnitId");

                    b.ToTable("SellerProductEntrys", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sellers.SellerRegistration", b =>
                {
                    b.Property<long>("SellerRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SellerRegistrationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlternatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("GSTNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PinCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrimaryPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RetailModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesRepresentativeContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesRepresentativeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WareHuoseId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("SellerRegistrationId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("SellerRegistrations", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.RefreshToken", b =>
                {
                    b.Property<long>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RefreshTokenId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Refresh_Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RefreshTokenId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 859, DateTimeKind.Local).AddTicks(8891),
                            Deleted = false,
                            RoleName = "Administrator"
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpirey")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            CreatedBy = 1L,
                            CreatedDate = new DateTime(2024, 3, 18, 14, 15, 4, 860, DateTimeKind.Local).AddTicks(974),
                            Deleted = false,
                            Email = "admin@appman.in",
                            FirstName = "Administrator",
                            IsActive = true,
                            LastActivityDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "",
                            Password = "r9NmU79/NE0x0el2cuI8PeI4GlVCdpOeB875sWPUeJw=",
                            PhoneNo = "9583000000",
                            UserType = 1,
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.Property<int>("UserRoleMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleMappingId"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleMappingId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleMappings", (string)null);

                    b.HasData(
                        new
                        {
                            UserRoleMappingId = 1,
                            RoleId = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserWareHouseMapping", b =>
                {
                    b.Property<int>("UserWareHouseMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserWareHouseMappingId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("UserWareHouseMappingId");

                    b.HasIndex("UserId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("UserWareHouseMappings", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Brands.Brand", b =>
                {
                    b.Property<long>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BrandId"));

                    b.Property<string>("BrandImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandId");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Districts.AddDistrict", b =>
                {
                    b.Property<long>("AddDistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddDistrictId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AddDistrictId");

                    b.ToTable("AddDistricts", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Districts.DistrictMapping", b =>
                {
                    b.Property<long>("DistrictMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DistrictMappingId"));

                    b.Property<long>("AddDistrictId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("PinCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DistrictMappingId");

                    b.ToTable("DistrictMappings", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Employees.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmployeeId"));

                    b.Property<string>("AssignedWareHouse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.GST.GST", b =>
                {
                    b.Property<long>("GSTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GSTId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("GSTValue")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GSTId");

                    b.ToTable("GSTs", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.HandlingTypes.HandlingType", b =>
                {
                    b.Property<int>("HandlingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HandlingTypeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("HandlingTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HandlingTypeId");

                    b.ToTable("HandlingTypes", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Items.DamageItem", b =>
                {
                    b.Property<long>("DamageItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DamageItemId"));

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CGST")
                        .HasColumnType("float");

                    b.Property<double?>("CaseWeight")
                        .HasColumnType("float");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DamagePics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DamageUnits")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HandlingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MRP")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float");

                    b.Property<double>("PurchaseCost")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("SGST")
                        .HasColumnType("float");

                    b.Property<double>("SalesCost")
                        .HasColumnType("float");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<double?>("UnitPerCase")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DamageItemId");

                    b.ToTable("DamageItems", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Items.DamageItemForFarming", b =>
                {
                    b.Property<long>("DamageItemForFarmingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DamageItemForFarmingId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DamagePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DamageUnits")
                        .HasColumnType("float");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GST")
                        .HasColumnType("float");

                    b.Property<string>("HSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ItemMasterForFarmingId")
                        .HasColumnType("bigint");

                    b.Property<double?>("MinQty")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("QtyPerKg")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DamageItemForFarmingId");

                    b.ToTable("DamageItemForFarmings", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Items.Item", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemId"));

                    b.Property<int?>("AddDistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("BarCodeNotAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BrandId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CGST")
                        .HasColumnType("float");

                    b.Property<double?>("CaseWeight")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double?>("DistributorCGSTValue")
                        .HasColumnType("float");

                    b.Property<double?>("DistributorCaseCost")
                        .HasColumnType("float");

                    b.Property<double?>("DistributorCost")
                        .HasColumnType("float");

                    b.Property<double?>("DistributorLandingCost")
                        .HasColumnType("float");

                    b.Property<string>("DistributorMargin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DistributorSGSTValue")
                        .HasColumnType("float");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandlingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HandlingTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("IGST")
                        .HasColumnType("float");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MRP")
                        .HasColumnType("float");

                    b.Property<double?>("MRPCaseCost")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PartnerSalesCaseCost")
                        .HasColumnType("float");

                    b.Property<double>("PartnerSalesCost")
                        .HasColumnType("float");

                    b.Property<double>("ProductWeight")
                        .HasColumnType("float");

                    b.Property<double?>("PurchaseCGSTValue")
                        .HasColumnType("float");

                    b.Property<double?>("PurchaseCaseCost")
                        .HasColumnType("float");

                    b.Property<double>("PurchaseCost")
                        .HasColumnType("float");

                    b.Property<double?>("PurchaseIGSTValue")
                        .HasColumnType("float");

                    b.Property<double?>("PurchaseLandingCost")
                        .HasColumnType("float");

                    b.Property<double?>("PurchaseSGSTValue")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("RetailerCGSTValue")
                        .HasColumnType("float");

                    b.Property<double?>("RetailerCaseCost")
                        .HasColumnType("float");

                    b.Property<double?>("RetailerCost")
                        .HasColumnType("float");

                    b.Property<double?>("RetailerLandingCost")
                        .HasColumnType("float");

                    b.Property<string>("RetailerMargin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RetailerSGSTValue")
                        .HasColumnType("float");

                    b.Property<double?>("SGST")
                        .HasColumnType("float");

                    b.Property<double?>("SalesCaseCost")
                        .HasColumnType("float");

                    b.Property<double>("SalesCost")
                        .HasColumnType("float");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("SectorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellerMargin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerRegistrationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategory1Id")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory1Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategory2Id")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory2Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<double?>("UnitPerCase")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Videos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WareHuoseId")
                        .HasColumnType("int");

                    b.HasKey("ItemId");

                    b.HasIndex("BrandId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Items.ItemMasterForFarming", b =>
                {
                    b.Property<long>("ItemMasterForFarmingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ItemMasterForFarmingId"));

                    b.Property<int?>("AddDistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("BarCodeNotAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GST")
                        .HasColumnType("float");

                    b.Property<string>("HSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("MinQty")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("QtyPerKg")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategory1Id")
                        .HasColumnType("int");

                    b.Property<string>("SubCategory2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubCategory2Id")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WareHuoseId")
                        .HasColumnType("int");

                    b.HasKey("ItemMasterForFarmingId");

                    b.ToTable("ItemMasterForFarmings", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Months.Month", b =>
                {
                    b.Property<long>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MonthId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MonthId");

                    b.ToTable("Months", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PinCodes.PinCode", b =>
                {
                    b.Property<long>("PinCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PinCodeId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double?>("Lat")
                        .HasColumnType("float");

                    b.Property<double?>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PinCodeId");

                    b.ToTable("PinCodes", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PinCodes.PinCodeMapping", b =>
                {
                    b.Property<long>("PinCodeMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PinCodeMappingId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("PinCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("PinCodeMappingId");

                    b.HasIndex("PinCodeId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("PinCodeMappings", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PurchaseOrders.PurchaseOrder", b =>
                {
                    b.Property<long>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PurchaseOrderId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("ItemId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("PurchaseOrderParentId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<long?>("SellerRegistrationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseOrderParentId");

                    b.HasIndex("SellerRegistrationId");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PurchaseOrders.PurchaseOrderParent", b =>
                {
                    b.Property<long>("PurchaseOrderParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PurchaseOrderParentId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("OrderShipped")
                        .HasColumnType("bit");

                    b.Property<string>("POPUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SellerRegistrationId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalQuantity")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("PurchaseOrderParentId");

                    b.HasIndex("SellerRegistrationId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("PurchaseOrderParents", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.SalesOrders.SalesOrderItem", b =>
                {
                    b.Property<long>("SalesOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesOrderItemId"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double?>("CGST")
                        .HasColumnType("float");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double?>("SGST")
                        .HasColumnType("float");

                    b.Property<long>("SalesOrderParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SalesOrderItemId");

                    b.ToTable("SalesOrderItems", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.SalesOrders.SalesOrderParent", b =>
                {
                    b.Property<long>("SalesOrderParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SalesOrderParentId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("POPUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesOrderUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalQuantity")
                        .HasColumnType("float");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("SalesOrderParentId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("SalesOrderParents");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.States.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StateId");

                    b.ToTable("States", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Stocks.Stock", b =>
                {
                    b.Property<long>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StockId"));

                    b.Property<long?>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("ItemId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float");

                    b.Property<int?>("SectorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<long?>("UnitId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WareHuoseId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("StockId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SectorId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WareHuoseId");

                    b.ToTable("Stocks", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.UOMs.Unit", b =>
                {
                    b.Property<long>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UnitId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UnitGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitId");

                    b.HasIndex("UnitGroupId");

                    b.ToTable("Units", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.UOMs.UnitConversionFactors", b =>
                {
                    b.Property<long>("UnitConversionFactorsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UnitConversionFactorsId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long>("FromUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("UnitConversionFactorsId");

                    b.HasIndex("FromUnitId");

                    b.ToTable("UnitConversionFactors", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.UOMs.UnitGroup", b =>
                {
                    b.Property<long>("UnitGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UnitGroupId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UnitGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UnitGroupId");

                    b.ToTable("UnitGroups", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Vehicles.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleId"));

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChasisNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InsuranceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchaseYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("RC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Vendors.Vendor", b =>
                {
                    b.Property<long>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VendorId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("GSTNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoCName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WareHuoseId")
                        .HasColumnType("bigint");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Vendors.VendorOnboarding", b =>
                {
                    b.Property<int>("VendorOnboardingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorOnboardingId"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VendorId")
                        .HasColumnType("bigint");

                    b.HasKey("VendorOnboardingId");

                    b.ToTable("VendorOnboardings", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.WareHuose", b =>
                {
                    b.Property<long>("WareHuoseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WareHuoseId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("GSTNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WareHuoseId");

                    b.ToTable("WareHouses", (string)null);
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Comunication.EmailAccount", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Comunication.EmailDomain", "EmailDomain")
                        .WithMany()
                        .HasForeignKey("Domain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDomain");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DPO", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DPOItems", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Distributor.DPO", null)
                        .WithMany("DPOItems")
                        .HasForeignKey("DPOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DSOItems", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Distributor.DSO", null)
                        .WithMany("DSOItems")
                        .HasForeignKey("DSOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributors.DistributorAssign", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Brands.Brand", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Distributors.DistributorRegistration", "DistributorRegistrations")
                        .WithMany()
                        .HasForeignKey("DistributorRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.PinCodes.PinCode", "PinCodes")
                        .WithMany()
                        .HasForeignKey("PinCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("DistributorRegistrations");

                    b.Navigation("PinCodes");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributors.DistributorRegistration", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Orders.BuyerOrderItems", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Orders.BuyerOrder", null)
                        .WithMany("BuyerOrderItems")
                        .HasForeignKey("BuyerOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Orders.Checkout", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", null)
                        .WithMany("Children")
                        .HasForeignKey("ApplicationId1");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.RoleAndApplicationWisePermission", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("RoleAndModuleWisePermission")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("RoleAndApplicationWisePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.UserWiseViewMapper", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Pemission.Application", "Application")
                        .WithMany("UserWiseViewMapper")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserWiseViewMapper")
                        .HasForeignKey("UserId");

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.BrandWiseTarget", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Months.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Month");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesAdminTarget", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Months.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Sales.SalesManager", "SalesManager")
                        .WithMany()
                        .HasForeignKey("SalesManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Month");

                    b.Navigation("SalesManager");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesExecutiveTarget", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Months.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Sales.SalesExecutiveRegistration", "SalesExecutiveRegistration")
                        .WithMany()
                        .HasForeignKey("SalesExecutiveRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Month");

                    b.Navigation("SalesExecutiveRegistration");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sales.SalesManagerTarget", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Months.Month", "Month")
                        .WithMany()
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Month");

                    b.Navigation("Sector");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sellers.SellerFarmingProduct", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.GST.GST", "GST")
                        .WithMany()
                        .HasForeignKey("GSTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.SubCategory1", "SubCategory1")
                        .WithMany()
                        .HasForeignKey("SubCategory1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.SubCategory2", "SubCategory2")
                        .WithMany()
                        .HasForeignKey("SubCategory2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.UOMs.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("GST");

                    b.Navigation("SubCategory1");

                    b.Navigation("SubCategory2");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sellers.SellerProductEntry", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Brands.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.GST.GST", "GST")
                        .WithMany()
                        .HasForeignKey("GSTId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.HandlingTypes.HandlingType", "HandlingType")
                        .WithMany()
                        .HasForeignKey("HandlingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.SubCategory1", "SubCategory1")
                        .WithMany()
                        .HasForeignKey("SubCategory1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.SubCategory2", "SubCategory2")
                        .WithMany()
                        .HasForeignKey("SubCategory2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.UOMs.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("GST");

                    b.Navigation("HandlingType");

                    b.Navigation("SubCategory1");

                    b.Navigation("SubCategory2");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Sellers.SellerRegistration", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserRoleMapping", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Users.Role", "Role")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany("UserRoleMappings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.UserWareHouseMapping", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Items.Item", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Brands.Brand", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PinCodes.PinCodeMapping", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.PinCodes.PinCode", "PinCode")
                        .WithMany()
                        .HasForeignKey("PinCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PinCode");

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PurchaseOrders.PurchaseOrder", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.PurchaseOrders.PurchaseOrderParent", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseOrderParentId");

                    b.HasOne("CloudVOffice.Core.Domain.Sellers.SellerRegistration", "SellerRegistration")
                        .WithMany()
                        .HasForeignKey("SellerRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("SellerRegistration");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PurchaseOrders.PurchaseOrderParent", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.Sellers.SellerRegistration", "SellerRegistration")
                        .WithMany()
                        .HasForeignKey("SellerRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SellerRegistration");

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.SalesOrders.SalesOrderParent", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.Stocks.Stock", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.ProductCategories.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.UOMs.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.WareHuose", "WareHuose")
                        .WithMany()
                        .HasForeignKey("WareHuoseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");

                    b.Navigation("Sector");

                    b.Navigation("Unit");

                    b.Navigation("WareHuose");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.UOMs.Unit", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.UOMs.UnitGroup", "UnitGroup")
                        .WithMany()
                        .HasForeignKey("UnitGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitGroup");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.UOMs.UnitConversionFactors", b =>
                {
                    b.HasOne("CloudVOffice.Core.Domain.WareHouses.UOMs.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("FromUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DPO", b =>
                {
                    b.Navigation("DPOItems");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Distributor.DSO", b =>
                {
                    b.Navigation("DSOItems");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Orders.BuyerOrder", b =>
                {
                    b.Navigation("BuyerOrderItems");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Pemission.Application", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("RoleAndModuleWisePermission");

                    b.Navigation("UserWiseViewMapper");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.Role", b =>
                {
                    b.Navigation("RoleAndApplicationWisePermission");

                    b.Navigation("UserRoleMappings");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoleMappings");

                    b.Navigation("UserWiseViewMapper");
                });

            modelBuilder.Entity("CloudVOffice.Core.Domain.WareHouses.PurchaseOrders.PurchaseOrderParent", b =>
                {
                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
